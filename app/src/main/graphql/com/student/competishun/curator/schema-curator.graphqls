type AllBannersResponseDto {
  banners: [Banner!]!

  count: Float!
}

type AllCoursesResponseDto {
  count: Float!

  courses: [Course!]!
}

type Banner {
  course_id: String

  createdAt: DateTime!

  deletedAt: DateTime!

  folder_name_for_banner: String

  id: ID!

  mobile_banner_image: String

  mobile_banner_image_name: String

  redirect_link: String

  updatedAt: DateTime!

  web_banner_image: String

  web_banner_image_name: String
}

type Bookmark {
  course_folder_content: CourseFolderContent!

  course_folder_content_id: String!

  createdAt: DateTime!

  deletedAt: DateTime!

  id: ID!

  updatedAt: DateTime!

  user_id: String!
}

type Cart {
  cart_items: [CartItem!]

  createdAt: DateTime!

  deletedAt: DateTime!

  id: ID!

  updatedAt: DateTime!

  user_id: ID!
}

type CartItem {
  cart_id: ID!

  createdAt: DateTime!

  deletedAt: DateTime!

  entity_id: ID!

  entity_type: EntityType!

  id: ID!

  quantity: Int!

  updatedAt: DateTime!
}

type CartResponseDto {
  cartItem: CartItem!

  course: Course!

  price: Int!
}

enum Class {
  ELEVENTH

  TWELFTH

  TWELFTH_PLUS
}

type Course {
  academic_year: String

  banner_image: String

  banner_image_name: String

  category_id: String

  category_name: String

  complementary_course: String

  course_class: Class

  course_end_date: DateTime

  course_features: [String!]

  course_offline_material_shipment: Boolean

  course_primary_teachers: [String!]

  course_start_date: DateTime

  course_support_teachers: [String!]

  course_tags: [String!]

  course_type: CourseType

  course_validity_end_date: DateTime

  createdAt: DateTime!

  created_by: String!

  customer_id: String!

  deletedAt: DateTime!

  description: String

  discount: Int

  doubt_session: Boolean

  download_pdf: Boolean

  entity_type: String

  exam_type: ExamType

  final_status: CourseStatus

  folder: [CourseFolder!]

  folder_count: String

  id: ID!

  is_recommended: Boolean!

  live_date: DateTime

  name: String!

  orientation_video: String

  orientation_video_name: String

  other_requirements: [OtherRequirements!]

  planner_description: String

  planner_pdf: String

  planner_pdf_name: String

  price: Int

  status: CourseStatus!

  student_course_track: [StudentCourseTrack!]

  target_year: Int

  updatedAt: DateTime!

  updated_by: String!

  video_thumbnail: String

  video_thumbnail_name: String

  with_installment_price: Int
}

type CourseAnalytics {
  academicYearPercentageChange: String!

  currentMonthOrderCount: Float!

  currentMonthPublishedCourseCount: Float!

  currentMonthUnpublishedCourseCount: Float!

  currentYearCourseCount: Float!

  monthlyOrderPercentageChange: String!

  monthlyPublishedCoursePercentageChange: String!

  monthlyUnpublishedCoursePercentageChange: String!

  prevMonthCoursePublishedCount: Float!

  prevMonthCourseUnpublishedCount: Float!

  prevMonthOrderCount: Float!

  prevYearCourseCount: Float!
}

type CourseCategory {
  createdAt: DateTime!

  deletedAt: DateTime!

  description: String

  id: ID!

  name: String!

  updatedAt: DateTime!
}

type CourseFolder {
  course: Course!

  course_id: String!

  createdAt: DateTime!

  deletedAt: DateTime!

  description: String

  folder_content: [CourseFolderContent!]

  folder_count: String

  id: ID!

  name: String!

  order: Int

  parent_folder_id: String

  pdf_count: String

  scheduled_time: DateTime

  updatedAt: DateTime!

  video_count: String
}

type CourseFolderContent {
  bookmarks: [Bookmark!]

  course_track: [StudentCourseTrack!]

  createdAt: DateTime!

  deletedAt: DateTime!

  description: String

  file_name: String!

  file_name_480p: String

  file_name_720p: String

  file_name_1080p: String

  file_type: FileType!

  file_uploading_status: FileUpload!

  file_url: String

  folder: CourseFolder!

  folder_id: String!

  homework: [Homework!]

  id: ID!

  order: Int

  orignal_file_name: String!

  scheduled_time: DateTime

  thumbnail: [Thumbnail!]

  updatedAt: DateTime!

  video_duration: Int
}

type CourseFolderLectureCount {
  completedDuration: Float

  completionPercentage: Float

  folder: CourseFolder

  folderContents: [FolderContentWithCompletion!]

  folderCount: Float

  imageCount: Float

  pdfCount: Float

  subfolderDurations: [SubfolderDuration!]

  videoCount: Float

  videoDuration: Float
}

type CourseFolderResponse {
  courseFoldersWithCount: [CourseFolderWithCount!]!

  parentCount: CourseFolderLectureCount!
}

type CourseFolderWithCount {
  course: Course!

  course_id: String!

  createdAt: DateTime!

  dataCount: CourseFolderLectureCount!

  deletedAt: DateTime!

  description: String

  folder_content: [CourseFolderContent!]

  folder_count: String

  id: ID!

  name: String!

  order: Int

  parent_folder_id: String

  pdf_count: String

  scheduled_time: DateTime

  updatedAt: DateTime!

  video_count: String
}

type CourseLectureCount {
  bannerImage: String!

  image_count: Float!

  lecture_count: Float!

  pdf_count: Float!

  plannerPdf: String!

  total_video_duration: Float!
}

type CourseParentFolderProgress {
  completedDuration: Float

  completionPercentage: Float

  folder: CourseFolder

  subfolderProgress: [SubfolderProgress!]

  videoDuration: Float
}

type CourseProgressResponseDto {
  complementaryAssociationFlag: String

  course: Course!

  progress: CourseFolderLectureCount
}

enum CourseStatus {
  COMING_SOON

  DRAFT

  PUBLISHED

  UNPUBLISH
}

enum CourseType {
  BOTH

  OFFLINE

  ONLINE
}

input CreateBannerInput {
  course_id: ID

  redirect_link: String
}

input CreateCartItemDto {
  entity_id: ID!

  entity_type: EntityType!

  quantity: Int!
}

input CreateCartItemsDto {
  cartItems: [CreateCartItemDto!]!
}

input CreateCourseCategoryInput {
  description: String

  name: String!
}

input CreateCourseFolderInput {
  course_id: ID!

  description: String

  name: String!

  parent_folder_id: ID

  scheduled_time: DateTime
}

input CreateCourseInput {
  academic_year: String

  category_id: ID

  complementary_course: ID

  course_class: Class

  course_end_date: DateTime

  course_features: [String!]

  course_offline_material_shipment: Boolean

  course_primary_teachers: [ID!]

  course_start_date: DateTime

  course_support_teachers: [ID!]

  course_tags: [String!]

  course_type: CourseType

  course_validity_end_date: DateTime

  created_by: ID!

  customer_id: ID!

  description: String

  discount: Int

  doubt_session: Boolean

  download_pdf: Boolean

  exam_type: ExamType

  final_status: CourseStatus

  is_recommended: Boolean

  live_date: DateTime

  name: String

  other_requirements: [OtherRequirements!]

  planner_description: String

  price: Int

  status: CourseStatus!

  target_year: Int

  with_installment_price: Int
}

input CreateCoursePublishInput {
  academic_year: String

  category_id: ID!

  complementary_course: ID

  course_class: Class

  course_end_date: DateTime

  course_features: [String!]

  course_offline_material_shipment: Boolean

  course_primary_teachers: [ID!]

  course_start_date: DateTime

  course_support_teachers: [ID!]

  course_tags: [String!]

  course_type: CourseType

  course_validity_end_date: DateTime

  created_by: ID!

  customer_id: ID!

  description: String

  discount: Int

  doubt_session: Boolean

  exam_type: ExamType

  final_status: CourseStatus

  is_recommended: Boolean

  live_date: DateTime

  name: String

  other_requirements: [OtherRequirements!]

  planner_description: String

  price: Int

  status: CourseStatus

  target_year: Int

  with_installment_price: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EntityType {
  COURSE

  QUIZZ

  TEST_SERIES
}

enum ExamType {
  IITJEE

  NEET
}

enum FileType {
  DOCUMENT

  IMAGE

  PDF

  VIDEO
}

enum FileUpload {
  COMPLETED

  GOOGLE_UPLOAD

  PROCESSING

  REJECTED
}

input FindAllBannersInput {
  limit: Int = 10

  offset: Int = 0

  search: String

  sortOrder: String
}

input FindAllCourseInput {
  academic_year: [String!]

  course_status: [CourseStatus!]

  course_type: [CourseType!]

  created_by: [String!]

  exam_type: [ExamType!]

  final_status: [CourseStatus!]

  is_recommended: Boolean

  limit: Int = 10

  offset: Int = 0

  search: String

  sortOrder: String

  target_year: [Int!]
}

input FindAllCourseInputStudent {
  category_name: String

  course_class: String

  exam_type: String

  is_recommended: Boolean

  limit: Int = 10

  offset: Int = 0

  search: String

  sortOrder: String
}

type FolderContentWithCompletion {
  content: CourseFolderContent

  videoCompletionPercentage: Float
}

type Homework {
  content: CourseFolderContent!

  content_id: String!

  createdAt: DateTime!

  deletedAt: DateTime!

  description: String

  file_name: String!

  file_type: FileType!

  file_uploading_status: FileUpload!

  file_url: String

  id: ID!

  orignal_file_name: String!

  updatedAt: DateTime!
}

input MergeVideo {
  contentId: ID!

  order: Int!
}

type Mutation {
  createBanner(createBannerInput: CreateBannerInput!, mobile_banner: [Upload], web_banner: [Upload]): Banner!

  createBookmark(contentId: String!): Bookmark!

  createBulkCourseCategory: Boolean!

  createCart(user_id: String!): Cart!

  createCartItems(createCartItemsInput: CreateCartItemsDto!): [CartItem!]!

  createCourse(banner_image: [Upload], createCourseInput: CreateCourseInput!, orientation_video: [Upload], planner_pdf: [Upload], video_thumbnail: [Upload]): Course!

  createCourseCategory(createCourseCategoryInput: CreateCourseCategoryInput!): CourseCategory!

  createCourseFolder(createCourseFolderInput: CreateCourseFolderInput!): CourseFolder!

  createPublishCourse(banner_image: [Upload], createCoursePublishInput: CreateCoursePublishInput!, id: String!, orientation_video: [Upload], planner_pdf: [Upload], video_thumbnail: [Upload]): Course!

  deleteCourse(id: String!): Boolean!

  deleteCourseCategory(id: String!): Boolean!

  deleteCourseFolder(id: String!): Boolean!

  deleteCourseFolderContent(id: String!): Boolean!

  deleteHomework(id: String!): Boolean!

  deleteThumbnail(id: String!): Boolean!

  mergeVideos(mergeVideos: [MergeVideo!]!): Boolean!

  removeBanner(id: ID!, mobileBanner: Boolean, webBanner: Boolean): Boolean!

  removeBookmark(id: String!): Boolean!

  removeCart(id: String!): Boolean!

  removeCartItem(id: ID!): Boolean!

  updateBanner(id: String!, mobile_banner: [Upload], updateBannerInput: UpdateBannerInput, web_banner: [Upload]): Boolean!

  updateCartItems(updateCartItemsInput: UpdateCartItemsDto!): Boolean!

  updateCourse(banner_image: [Upload], id: String!, orientation_video: [Upload], planner_pdf: [Upload], updateCourseInput: UpdateCourseInput!, video_thumbnail: [Upload]): Boolean!

  updateCourseCategory(id: String!, updateCourseCategoryInput: UpdateCourseCategoryInput!): Boolean!

  updateCourseFolder(id: String!, updateCourseFolderInput: UpdateCourseFolderInput!): Boolean!

  updateCourseFolderContent(id: String!, updateFolderContent: UpdateFolderContent!): Boolean!

  updateHomework(id: String!, updateHomework: UpdateHomework!): Boolean!

  updateVideoProgress(updateVideoProgress: UpdateVideoProgress!): StudentCourseTrack!
}

enum OtherRequirements {
  AADHAR_CARD

  ALL

  FATHERS_NAME

  FULL_ADDRESS

  PASSPORT_SIZE_PHOTO

  T_SHIRTS

  WHATSAPP_NUMBER
}

type Query {
  courseAnalytics: CourseAnalytics!

  courseListFromIds(courseIds: [String!]!): [Course!]!

  downloadVideo(contentId: String!): Boolean!

  findAllBookmarks(courseId: String, fileType: String): [Bookmark!]!

  findAllCartItems: [CartResponseDto!]!

  findAllCourseFolderContentByScheduleTime(course_id: String, endDate: DateTime!, startDate: DateTime!): [ScheduleContentResponseDto!]!

  findBookmark(id: String!): Bookmark!

  findCartItemById(id: ID!): CartResponseDto!

  findCourseFolderAndDataCountByParentId(parentFolderId: String!): CourseFolderResponse!

  findCourseFolderByParentId(parentFolderId: String!): [CourseFolder!]!

  findCourseFolderProgress(id: String!): CourseFolderLectureCount!

  findCourseParentFolderProgress(courseId: String!): CourseParentFolderProgress!

  findFolderPath(id: String!): String!

  findOne(id: String!): Cart!

  getAllBanners(filters: FindAllBannersInput): AllBannersResponseDto!

  getAllCourse(filters: FindAllCourseInput): AllCoursesResponseDto!

  getAllCourseCategories: [CourseCategory!]!

  getAllCourseForStudent(filters: FindAllCourseInputStudent!): AllCoursesResponseDto!

  getAllCourseLecturesCount(id: String!): CourseLectureCount!

  getAllFolders: [CourseFolder!]!

  getCourseById(id: String!): Course!

  getCourseCategoryById(id: String!): CourseCategory!

  getCourseFolderContent(id: String!): CourseFolderContent!

  getFolderById(id: String!): CourseFolder!

  getFolderLecturesCount(id: String!): CourseFolderLectureCount!

  getVideoProgress(courseFolderContentId: String!): Float!

  getVideoStreamDataSignedUrl(courseFolderContentId: String!, format: String): VideoStreamData!

  getbannerById(id: String!): Banner!

  myCourses: [CourseProgressResponseDto!]!

  myCoursesForAdmin(userId: String!): [CourseProgressResponseDto!]!

  relatedCourses(categoryName: String!): [Course!]!
}

type ScheduleContentResponseDto {
  content: CourseFolderContent!

  folderPath: String

  parentFolderName: String

  studentTrack: StudentCourseTrack
}

type StudentCourseTrack {
  completed_duration: Int!

  course_folder_content_id: String!

  course_id: String!

  createdAt: DateTime!

  current_duration: Int!

  deletedAt: DateTime!

  id: ID!

  total_duration: Int!

  updatedAt: DateTime!

  user_id: String!
}

type SubfolderDuration {
  completedDuration: Float

  completionPercentage: Float!

  folder: CourseFolder

  folderContents: [FolderContentWithCompletion!]

  folderCount: Float

  pdfCount: Float

  videoCount: Float

  videoDuration: Float
}

type SubfolderProgress {
  completedDuration: Float

  completionPercentage: Float!

  folder: CourseFolder

  folderContents: [FolderContentWithCompletion!]

  folderCount: Float

  pdfCount: Float

  videoCount: Float

  videoDuration: Float
}

type Thumbnail {
  content: CourseFolderContent!

  content_id: String!

  createdAt: DateTime!

  deletedAt: DateTime!

  file_name: String!

  file_type: FileType!

  file_uploading_status: FileUpload!

  file_url: String

  id: ID!

  orignal_file_name: String!

  updatedAt: DateTime!
}

input UpdateBannerInput {
  course_id: ID

  redirect_link: String
}

input UpdateCartItemDto {
  cart_item_id: ID!

  quantity: Int!
}

input UpdateCartItemsDto {
  cartItems: [UpdateCartItemDto!]!
}

input UpdateCourseCategoryInput {
  description: String

  name: String
}

input UpdateCourseFolderInput {
  course_id: ID

  description: String

  name: String

  order: Int

  parent_folder_id: ID

  scheduled_time: DateTime
}

input UpdateCourseInput {
  academic_year: String

  category_id: ID

  complementary_course: ID

  course_class: Class

  course_end_date: DateTime

  course_features: [String!]

  course_offline_material_shipment: Boolean

  course_primary_teachers: [ID!]

  course_start_date: DateTime

  course_support_teachers: [ID!]

  course_tags: [String!]

  course_type: CourseType

  course_validity_end_date: DateTime

  created_by: ID

  customer_id: ID

  description: String

  discount: Int

  doubt_session: Boolean

  download_pdf: Boolean

  exam_type: ExamType

  final_status: CourseStatus

  is_recommended: Boolean

  live_date: DateTime

  name: String

  other_requirements: [OtherRequirements!]

  planner_description: String

  price: Int

  status: CourseStatus

  target_year: Int

  with_installment_price: Int
}

input UpdateFolderContent {
  description: String

  file_name: String

  order: Int

  scheduled_time: DateTime
}

input UpdateHomework {
  description: String

  file_name: String
}

input UpdateVideoProgress {
  courseFolderContentId: ID!

  currentDuration: Int!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type VideoStreamData {
  signedUrl: String!
}

schema {
  query: Query
  mutation: Mutation
}
