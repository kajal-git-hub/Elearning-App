type Admin {
  createdAt: DateTime!

  deletedAt: DateTime!

  email: String!

  id: ID!

  role: Role!

  updatedAt: DateTime!
}

type AdminAuth {
  accessToken: String!

  admin: Admin!

  refreshToken: String!
}

input AdminSignInInput {
  email: String!

  password: String!
}

type Auth {
  accessToken: String!

  refreshToken: String!

  user: User!
}

input CreateCustomerInput {
  countryCode: String

  email: String

  mobileNumber: String

  name: String!
}

input CreateStudentByAdminInput {
  aadharNumber: String

  address: String!

  bloodGroup: String

  collegeName: String

  countryCode: String!

  dob: DateTime!

  email: String!

  fullName: String!

  gender: String

  mobileNumber: String!

  nationality: String

  schoolName: String

  tenth_marks: String

  twelfth_marks: String
}

type Customer {
  countryCode: String

  createdAt: DateTime!

  deletedAt: DateTime!

  email: String

  id: ID!

  mobileNumber: String

  name: String!

  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetOtpInput {
  countryCode: String!

  mobileNumber: String!
}

type GetStudentsDto {
  count: Int!

  students: [User!]!
}

type MarksDto {
  tenth: String

  twelfth: String
}

type Mutation {
  createCustomer(createCustomerInput: CreateCustomerInput!): Customer!

  createStudentByAdmin(createStudentByAdminInput: CreateStudentByAdminInput!): User!

  deleteMyAccount: Boolean!

  getNewTokens: Auth!

  getOtp(getOtpInput: GetOtpInput!): Boolean!

  updateCustomer(updateCustomerInput: UpdateCustomerInput!): Customer!

  updateStudentByAdmin(updateStudentByAdminInput: UpdateStudentByAdminInput!): User!

  updateUser(documentPhoto: Upload, passportPhoto: Upload, updateUserInput: UpdateUserInput!): User!

  verifyOtp(verifyOtpInput: VerifyOtpInput!): Auth!
}

type Query {
  adminSignIn(adminSignInInput: AdminSignInInput!): AdminAuth!

  getMyDetails: User!

  getStudents(limit: Float!, offset: Float!, search: String, sort: String = "DESC", studentId: String, targetYear: Float): GetStudentsDto!

  sayHello: String!
}

type Role {
  createdAt: DateTime!

  deletedAt: DateTime!

  id: ID!

  name: String!

  updatedAt: DateTime!
}

input UpdateCustomerInput {
  countryCode: String

  email: String

  id: ID!

  mobileNumber: String

  name: String
}

input UpdateStudentByAdminInput {
  aadharNumber: String

  address: String

  bloodGroup: String

  collegeName: String

  countryCode: String

  dob: DateTime

  email: String

  fullName: String

  gender: String

  id: ID!

  mobileNumber: String

  nationality: String

  schoolName: String

  tenth_marks: String

  twelfth_marks: String
}

input UpdateUserInput {
  city: String

  fatherName: String

  fullName: String

  preparingFor: String

  reference: String

  tShirtSize: String

  targetYear: Int

  waCountryCode: String

  waMobileNumber: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type User {
  countryCode: String!

  createdAt: DateTime!

  deletedAt: DateTime!

  email: String

  fullName: String

  id: ID!

  mobileNumber: String!

  role: Role!

  updatedAt: DateTime!

  userInformation: UserInformation!
}

type UserInformation {
  aadharNumber: String

  address: String

  bloodGroup: String

  city: String

  collegeName: String

  createdAt: DateTime!

  deletedAt: DateTime!

  dob: DateTime

  documentPhoto: String

  fatherName: String

  gender: String

  id: ID!

  marks: MarksDto

  nationality: String

  passportPhoto: String

  preparingFor: String

  reference: String

  rollNumber: String

  schoolName: String

  tShirtSize: String

  targetYear: Int

  updatedAt: DateTime!

  waCountryCode: String

  waMobileNumber: String
}

input VerifyOtpInput {
  countryCode: String!

  mobileNumber: String!

  otp: Int!
}

schema {
  query: Query
  mutation: Mutation
}
