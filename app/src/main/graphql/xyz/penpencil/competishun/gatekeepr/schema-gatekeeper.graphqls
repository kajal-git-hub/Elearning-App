type AddressDto {
  addressLine1: String

  city: String

  pinCode: String

  state: String
}

type Admin {
  createdAt: DateTime!

  deletedAt: DateTime!

  email: String!

  id: ID!

  role: Role!

  updatedAt: DateTime!
}

type AdminAuth {
  accessToken: String!

  admin: Admin!

  refreshToken: String!
}

input AdminSignInInput {
  email: String!

  password: String!
}

type Auth {
  accessToken: String!

  refreshToken: String!

  user: User!
}

input CreateCustomerInput {
  countryCode: String

  email: String

  mobileNumber: String

  name: String!
}

input CreateStudentByAdminInput {
  aadharNumber: String

  addressLine1: String!

  bloodGroup: String

  city: String!

  collegeName: String

  countryCode: String!

  dob: DateTime!

  email: String!

  fatherMobileCountryCode: String

  fatherMobileNumber: String

  fullName: String!

  gender: String

  mobileNumber: String!

  nationality: String

  pinCode: String!

  schoolName: String

  state: String

  tenth_marks: String

  twelfth_marks: String
}

type Customer {
  countryCode: String

  createdAt: DateTime!

  deletedAt: DateTime!

  email: String

  id: ID!

  mobileNumber: String

  name: String!

  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum ExamTypeEnum {
  IITJEE

  NEET
}

type ExtendedUserCourseMapping {
  courseDetails: GetCourseByIdsDto

  createdAt: DateTime!

  deletedAt: DateTime!

  enrolledCourseId: String!

  enrolledCourseName: String!

  examType: String!

  id: ID!

  paymentStatus: String!

  pricePaid: String!

  updatedAt: DateTime!
}

type GetCourseByIdsDto {
  banner_image: String!

  category_name: String!

  discount: Int!

  exam_type: String!

  id: String!

  is_recommended: Boolean!

  name: String!

  price: Int!

  status: String!

  target_year: Int!

  video_thumbnail: String!

  video_thumbnail_name: String!

  with_installment_price: String!
}

type GetMyDetailsDto {
  countryCode: String

  courses: [ExtendedUserCourseMapping]!

  createdAt: DateTime!

  deletedAt: DateTime!

  email: String

  fullName: String

  id: ID!

  isGoogleSignup: Boolean!

  metadata: UserMetadata!

  mobileNumber: String

  role: Role!

  updatedAt: DateTime!

  userInformation: UserInformation!
}

input GetOtpInput {
  countryCode: String!

  mobileNumber: String!
}

type GetStudentsDto {
  count: Int!

  students: [User!]!
}

type GetUserMetricsDto {
  iitUsers: MetricDto!

  neetUsers: MetricDto!

  newRegisteredUsers: MetricDto!

  totalUsers: MetricDto!
}

type GetUsersInternalDto {
  countryCode: String

  email: String

  id: ID!

  mobileNumber: String

  rollNumber: String
}

type MarksDto {
  tenth: String

  twelfth: String
}

type MetricDto {
  percentDifference: Int!

  previousMonthCount: Int!

  totalCount: Int!
}

type Mutation {
  createCustomer(createCustomerInput: CreateCustomerInput!): Customer!

  createStudentByAdmin(createStudentByAdminInput: CreateStudentByAdminInput!): User!

  deleteMyAccount: Boolean!

  getNewTokens: Auth!

  getOtp(getOtpInput: GetOtpInput!): Boolean!

  googleAndroidAuth(idToken: String!): Auth!

  updateCustomer(updateCustomerInput: UpdateCustomerInput!): Customer!

  updateStudentByAdmin(updateStudentByAdminInput: UpdateStudentByAdminInput!): User!

  updateUser(documentPhoto: Upload, passportPhoto: Upload, updateUserInput: UpdateUserInput!): GetMyDetailsDto!

  verifyOtp(verifyOtpInput: VerifyOtpInput!): Auth!
}

type Query {
  adminSignIn(adminSignInInput: AdminSignInInput!): AdminAuth!

  getMyDetails: GetMyDetailsDto!

  getStudents(courseIds: [ID!], endDate: DateTime, examType: ExamTypeEnum, isEnrolled: Boolean, limit: Float!, offset: Float!, paymentStatuses: [StudentPaymentStatuses!], search: String, sort: String = "DESC", startDate: DateTime, studentId: String, targetYear: [Float!]): GetStudentsDto!

  getStudentsWithoutPagination(courseIds: [ID!], endDate: DateTime, examType: ExamTypeEnum, isEnrolled: Boolean, paymentStatuses: [StudentPaymentStatuses!], search: String, sort: String = "DESC", startDate: DateTime, studentId: String, targetYear: [Float!]): GetStudentsDto!

  getUserMetrics: GetUserMetricsDto!

  getUsersFromUserIdsInternal(ids: [ID!]!): [GetUsersInternalDto]!

  sayHello: String!
}

type Role {
  createdAt: DateTime!

  deletedAt: DateTime!

  id: ID!

  name: String!

  updatedAt: DateTime!
}

enum StudentPaymentStatuses {
  CAPTURED

  INSTALLMENT_1

  INSTALLMENT_2

  PAID
}

input UpdateCustomerInput {
  countryCode: String

  email: String

  id: ID!

  mobileNumber: String

  name: String
}

input UpdateStudentByAdminInput {
  aadharNumber: String

  addressLine1: String

  bloodGroup: String

  city: String

  collegeName: String

  countryCode: String

  dob: DateTime

  email: String

  fatherMobileCountryCode: String

  fatherMobileNumber: String

  fullName: String

  gender: String

  id: ID!

  mobileNumber: String

  nationality: String

  pinCode: String

  schoolName: String

  state: String

  tenth_marks: String

  twelfth_marks: String
}

input UpdateUserInput {
  addressLine1: String

  city: String

  countryCode: String

  dob: DateTime

  email: String

  fatherMobileCountryCode: String

  fatherMobileNumber: String

  fatherName: String

  fullName: String

  gender: String

  mobileNumber: String

  pinCode: String

  preparingFor: String

  reference: String

  state: String

  tShirtSize: String

  targetYear: Int

  waCountryCode: String

  waMobileNumber: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type User {
  countryCode: String

  courses: [UserCourseMapping]!

  createdAt: DateTime!

  deletedAt: DateTime!

  email: String

  fullName: String

  id: ID!

  isGoogleSignup: Boolean!

  metadata: UserMetadata!

  mobileNumber: String

  role: Role!

  updatedAt: DateTime!

  userInformation: UserInformation!
}

type UserCourseMapping {
  createdAt: DateTime!

  deletedAt: DateTime!

  enrolledCourseId: String!

  enrolledCourseName: String!

  examType: String!

  id: ID!

  paymentStatus: String!

  pricePaid: String!

  updatedAt: DateTime!
}

type UserInformation {
  aadharNumber: String

  address: AddressDto

  bloodGroup: String

  city: String

  collegeName: String

  createdAt: DateTime!

  deletedAt: DateTime!

  dob: DateTime

  documentPhoto: String

  fatherMobileCountryCode: String

  fatherMobileNumber: String

  fatherName: String

  gender: String

  id: ID!

  marks: MarksDto

  nationality: String

  passportPhoto: String

  preparingFor: String

  reference: String

  rollNumber: String

  schoolName: String

  tShirtSize: String

  targetYear: Int

  updatedAt: DateTime!

  waCountryCode: String

  waMobileNumber: String
}

type UserMetadata {
  createdAt: DateTime!

  deletedAt: DateTime!

  enrolledCourseId: String

  enrolledCourseName: String

  id: ID!

  paymentStatus: String

  pricePaid: Int

  updatedAt: DateTime!
}

input VerifyOtpInput {
  countryCode: String!

  mobileNumber: String!

  otp: Int!
}

schema {
  query: Query
  mutation: Mutation
}
